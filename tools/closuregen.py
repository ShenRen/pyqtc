HEADER = """\
// This file is generated by closuregen.py.  Changes will be lost.

#define C_ARG(type, data) new ClosureArgument<type>(data)

Closure* NewClosure(QObject* sender, const char* signal, QObject* receiver, const char* slot);

"""

FOOTER = """\
#undef C_ARG
"""

FUNCTION = """\
%(template)s\
Closure* NewClosure(%(func_args)s) {
  return new Closure(%(ctor_args)s);
}

"""


def NewClosure(arg_count):
  template  = ""
  func_args = ["QObject* sender", "const char* signal",
               "QObject* receiver", "const char* slot"]
  ctor_args = ["sender", "signal", "receiver", "slot"]

  if arg_count:
    template_args = []
    for i in xrange(arg_count):
      template_args.append("typename T%d" % i)
      func_args.append("const T%d& val%d" % (i, i))
      ctor_args.append("C_ARG(T%d, val%d)" % (i, i))

    template = "template <%s>\n" % ", ".join(template_args)

  return FUNCTION % {
    "template": template,
    "func_args": ", ".join(func_args),
    "ctor_args": ", ".join(ctor_args),
  }


def Main():
  print HEADER,
  for arg_count in xrange(1, 11):
    print NewClosure(arg_count),
  print FOOTER


if __name__ == "__main__":
  Main()
